---
import { object } from 'astro:schema';
import Main from './Main.astro';

interface Doodle {
  src: string;
  x: number;
  y: number;
}

function generateEdgeBiasedRandom(min = 1, max = 100): number {
  const mid = (max - min) / 2;
  const r = Math.random(); // uniform [0,1)
  const biased = (r < 0.5)
    ? min + mid * (1 - Math.sqrt(1 - 2 * r))  // toward min
    : max - mid * (1 - Math.sqrt(2 * r - 1)); // toward max

  return Math.round(biased);
}

const { dark_theme = false, doodle_count=20 } = Astro.props;

const allDoodleImages = import.meta.glob('../assets/Doodles/*', { eager: true }) as Record<string, { default: { src: string } }>;;
const doodleSources = Object.values(allDoodleImages).map(image => image.default.src) ;

const allObjectImages = import.meta.glob('../assets/Objects/*', { eager: true }) as Record<string, { default: { src: string } }>;;
const objectSources = Object.values(allObjectImages).map(image => image.default.src) ;


function generateRandomList(sourceList: string[], count=10): Doodle[] {

  const length = count;
  const result: Doodle[] = [];
  
  for (let i = 0; i < length; i++) {

    const randomSourceIndex = Math.floor(Math.random() * sourceList.length);
    const randomSource = sourceList[randomSourceIndex];
        
    
    result.push({
      src: randomSource,
      x: generateEdgeBiasedRandom(),
      y: Math.floor(Math.random() * 100)
    });
  }
  
  return result;
}

const randomDoodles = generateRandomList(doodleSources, doodle_count);
const randomObjects = generateRandomList(objectSources,);


---


<Main>
    
    <div id="background" class="w-full min-h-full overflow-hidden absolute z-0">
        <div id="grid_texture" class={dark_theme ? "dark":"light"}></div>
        <div id="smear_texture" class={dark_theme ? "dark":"light"}></div>
        <div id="doodle_texture" class={`relative ${dark_theme ? 'dark': 'light'}`}>

          {randomDoodles.map((image, index) => (
            <img
              class={`select-none absolute w-80`}
              style={`top:${[image.y]}%; left:${image.x}%;`}
              src={image.src}
              alt={``}
            />
          ))}
          
        </div>


    </div>

    <div class="z-10 relative w-full h-full ">
        <slot></slot>
    </div>
    
</Main>



<style>


    #grid_texture, #smear_texture, #doodle_texture {
        position: absolute;
        width: 100%;
        height: 100%;
    }

    #grid_texture.dark{
        --c1: #262626;
        --c2: #151515;
    }
    #grid_texture.light{
        --c1: #cccbcb;
        --c2: #ecf2f5;
    }

    #grid_texture {
        
        --s: 220px; /* control the size */
        
        --_g: #0000 90deg, var(--c1) 0;
        background: 
          conic-gradient(from 90deg at 2px 2px, var(--_g)),
          conic-gradient(from 90deg at 1px 1px, var(--_g)),
          var(--c2);
        background-size: var(--s) var(--s), calc(var(--s)/5) calc(var(--s)/5);

    }

    #smear_texture {
        background-size: cover;
        background-position: center;
        opacity: 0.2;
    }

    #smear_texture.dark {
        background-image: url("../assets/bcgTexture.jpg");
        mix-blend-mode: screen; 
    }

    #smear_texture.light {
        background-image: url("../assets/bcgTexture-inverted.jpg");
        mix-blend-mode: multiply; 
    }

    #doodle_texture.light {
        filter: invert(100%);
        mix-blend-mode: multiply;
        opacity: 0.4;
    }

    #doodle_texture.dark {
        
        mix-blend-mode: screen;
        opacity: 0.3;
    }

</style>