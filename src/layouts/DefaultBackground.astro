---
import { object } from 'astro:schema';
import Main from './Main.astro';

interface Doodle {
  src: string;
  left: boolean;
  dis: number;
}

const { dark_theme = false } = Astro.props;

const allImages = import.meta.glob('../assets/Doodles/*', { eager: true }) as Record<string, { default: { src: string } }>;;
const sources = Object.values(allImages).map(image => image.default.src) ;

console.log(sources);



console.log(Object.values(allImages)[0]);


function generateRandomList(sourceList: string[]): Doodle[] {

  const length = 60;
  const result: Doodle[] = [];
  
  for (let i = 0; i < length; i++) {

    const randomSourceIndex = Math.floor(Math.random() * sourceList.length);
    const randomSource = sourceList[randomSourceIndex];
    
    const randomLeft = Math.random() > 0.5;
    
    const randomDis = Math.floor(Math.random() * 40); // Adjust range as needed
    
    result.push({
      src: randomSource,
      left: randomLeft,
      dis: randomDis
    });
  }
  
  return result;
}

const randomDoodles = generateRandomList(sources);


---


<Main>

    <div id="background" class=" w-full h-full overflow-hidden fixed z-0">
        <div id="grid_texture" class={dark_theme ? "dark":"light"}></div>
        <div id="smear_texture" class={dark_theme ? "dark":"light"}></div>
        <div id="doodle_texture" class={`flex flex-col ${dark_theme ? 'dark': 'light'}`}>

          {randomDoodles.map((image, index) => (
            <img
              class={`select-none w-32 ${image.left ? 'self-start' : 'self-end'} `}
              style={`${image.left ? 'margin-left' : 'margin-right'}: ${image.dis}%; `}
              src={image.src}
              alt={``}
            />
          ))}
          
        </div>
    </div>

    <div class="z-10 relative w-full h-full ">
        <slot></slot>
    </div>

    
</Main>

<style>


    #grid_texture, #smear_texture, #doodle_texture {
        position: absolute;
        width: 100%;
        height: 100%;
    }

    #grid_texture.dark{
        --c1: #262626;
        --c2: #151515;
    }
    #grid_texture.light{
        --c1: #cccbcb;
        --c2: #ecf2f5;
    }

    #grid_texture {
        
        --s: 220px; /* control the size */
        
        --_g: #0000 90deg, var(--c1) 0;
        background: 
          conic-gradient(from 90deg at 2px 2px, var(--_g)),
          conic-gradient(from 90deg at 1px 1px, var(--_g)),
          var(--c2);
        background-size: var(--s) var(--s), calc(var(--s)/5) calc(var(--s)/5);

    }

    #smear_texture {
        background-size: cover;
        background-position: center;
        opacity: 0.3;
    }

    #smear_texture.dark {
        background-image: url("../assets/bcgTexture.jpg");
        mix-blend-mode: screen; 
    }

    #smear_texture.light {
        background-image: url("../assets/bcgTexture-inverted.jpg");
        mix-blend-mode: multiply; 
    }

    #doodle_texture.light {
        filter: invert(100%);
        mix-blend-mode: multiply;
        opacity: 0.4;
    }

    #doodle_texture.dark {
        
        mix-blend-mode: screen;
        opacity: 0.3;
    }

</style>